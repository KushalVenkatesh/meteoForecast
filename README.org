* meteoForecast

[[http://dx.doi.org/10.5281/zenodo.12282][https://zenodo.org/badge/1928/oscarperpinan/meteoForecast.png]]

  =meteoForecast= is a package to access outputs from Numerical Weather Prediction models both in raster format and as a time series for a location.
  The current version works with these services:
  - [[http://www.emc.ncep.noaa.gov/index.php?branch=GFS][GFS]]
  - [[http://www.meteogalicia.es/web/modelos/threddsIndex.action][MeteoGalicia]]
  - [[https://openmeteoforecast.org/][OpenMeteo]]
  - [[http://www.ncdc.noaa.gov/data-access/model-data/model-datasets/north-american-mesoscale-forecast-system-nam][NAM]]
  - [[http://www.ncdc.noaa.gov/data-access/model-data/model-datasets/rapid-refresh-rap][RAP]]

[[file:figs/mapaServices.png]]
  
  New services will be added gradually, using [[https://github.com/oscarperpinan/mds/wiki][this collection]] of
  meteorological data sources as reference.
  
  This package has been developed in the framework of the European Project [[http://www.pvcrops.eu/project-deliverables][PVCROPS]].

** Installation

The development version is available at GitHub:
#+begin_src R
    ## install.packages("devtools")
    devtools::install_github("meteoForecast", "oscarperpinan")
#+end_src

The stable version is available at [[http://cran.r-project.org/web/packages/meteoForecast/][CRAN]]:

 #+begin_src R
    install.packages('meteoForecast')
 #+end_src

** Usage

#+begin_src R
  library(meteoForecast)
#+end_src

Load =varsMG=, =varsOM= and =varsGFS= to know about the variables available in
each service:

#+begin_src R
data(varsMG)
head(varsMG)
data(varsOM)
head(varsOM)
data(varsGFS)
head(varsGFS)
#+end_src

=grepVar= will help you to find the variable you need.

#+begin_src R
grepVar('cloud', service = 'gfs')
#+end_src

#+begin_example
 [1] "Temperature_low_cloud_top"           "Pressure_middle_cloud_top"          
 [3] "Temperature_middle_cloud_top"        "Total_cloud_cover_middle_cloud"     
 [5] "Cloud_Work_Function"                 "Pressure_low_cloud_bottom"          
 [7] "Pressure_convective_cloud_top"       "Pressure_convective_cloud_bottom"   
 [9] "Total_cloud_cover_high_cloud"        "Total_cloud_cover"                  
[11] "Pressure_low_cloud_top"              "Pressure_high_cloud_top"            
[13] "Pressure_middle_cloud_bottom"        "Cloud_mixing_ratio"                 
[15] "Pressure_high_cloud_bottom"          "Total_cloud_cover_convective_cloud" 
[17] "Cloud_water"                         "Total_cloud_cover_entire_atmosphere"
[19] "Total_cloud_cover_low_cloud"         "Temperature_high_cloud_top"
#+end_example

** Services

Each function admits an argument named =service= to choose the
service. After loading =meteoForecast= the default service is
Meteogalicia as reported with:

#+begin_src R
mfService()
#+end_src

#+RESULTS:
: [1] "meteogalicia"

You can choose a different service (for the running session) using
  =mfService= with the name of the service.
#+begin_src R
mfService('gfs')
#+end_src

#+RESULTS:
: Option service changed to gfs

#+begin_src R
mfService('meteogalicia')
#+end_src

#+RESULTS:
: Option service changed to meteogalicia

** Basic information about services

- =mfProj4= provides the projection of a service:
#+begin_src R
mfProj4('nam')
#+end_src

#+RESULTS:
: [1] "+proj=lcc +lat_1=25 +lat_0=25 +lon_0=-95 +k_0=1 +x_0=0 +y_0=0 +a=6367470.21484375 +b=6367470.21484375 +units=km +no_defs "

- =mfExtent= provides the extent of a service (using the class
  =Extent= defined by the package =raster=):
#+begin_src R
mfExtent('meteogalicia', resolution = 36)
#+end_src

#+RESULTS:
: class       : Extent 
: xmin        : -49.18259 
: xmax        : 18.789 
: ymin        : 24.03791 
: ymax        : 56.06608


*** Raster Data

- =getRaster= gets a forecast output inside a bounding box and
  provides a multilayer raster data using the =RasterBrick= class
  defined in the package =raster=.

  #+begin_src R
    wrf <- getRaster(var = 'temp', day = '2014-01-25', run = '00')
  #+end_src

  #+RESULTS:

  #+begin_src R
    library(rasterVis)
    
    levelplot(wrf, layers = 10:21)
  #+end_src

[[file:figs/wrf.png]]

-  =getRasterDays= uses =getRaster= to download the results
  cast each day comprised between =start= and =end= using the
  00UTC run. 

   #+begin_src R
     wrfDays <- getRasterDays('cft',
                           start = '2014-01-01',
                           end = '2014-01-05',
                           box = c(-2, 35, 2, 40))
     
     hovmoller(wrfDays, par.settings = BTCTheme,
               interpolate = TRUE, panel = panel.levelplot.raster)
   #+end_src

[[file:figs/wrfDays.png]]



*** Point Data
  =getPoint=, =getPointDays=, and =getPointRuns= get data for a
  certain location and produce a time series using the =zoo= class.

- =getPoint=
  #+begin_src R
    ## temperature (Kelvin) forecast from meteogalicia
    tempK <- getPoint(c(0, 40), vars = 'temp')
    ## Cell does not coincide exactly with request
    attr(tempK, 'lat')
    attr(tempK, 'lon')
    ## Units conversion
    tempC <- tempK - 273
  #+end_src
  
  #+begin_src R
    xyplot(tempC)
  #+end_src


[[file:figs/tempC.png]]


- =getPointDays=
  #+begin_src R
    ## Time sequence
    radDays <- getPointDays(c(0, 40), start = '2013-01-01',
                            end = '2013-01-15')
    
    xyplot(radDays)
  #+end_src


[[file:figs/radDays.png]]


- =getPointRuns=
  #+begin_src R
    ## Variability between runs
    radRuns <- getPointRuns(c(0, 40), start = '2013-01-01',
                            end = '2013-01-15')
    xyplot(radRuns, superpose = TRUE)
  #+end_src


[[file:figs/radRuns.png]]


  #+begin_src R
    ## variability around the average
    radAv <- rowMeans(radRuns)
    radVar <- sweep(radRuns, 1, radAv)
    xyplot(radVar, superpose = TRUE)
  #+end_src


[[file:figs/radVar.png]]

